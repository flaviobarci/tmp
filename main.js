/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/Services/OnChangeNotification.ts
var OnChangeNotification = async (file, data, cache, url) => {
  const { frontmatter } = cache;
  const taskname = file.basename;
  const assigned = frontmatter.assigned;
  console.log(assigned);
  if (!assigned) {
    console.log("No assigned user");
    return;
  }
  const cleanTaskname = taskname.replace(/\s/g, "");
  const result = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Access-Control-Allow-Origin": "*"
    },
    body: JSON.stringify({ taskname: cleanTaskname, assigned })
  });
  if (result.ok) {
    console.log("success");
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  url: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading plugin");
    await this.loadSettings();
    this.addSettingTab(new MainSettingTab(this.app, this));
    this.registerEvent(this.app.metadataCache.on(
      "changed",
      async (file, data, cache) => {
        OnChangeNotification(file, data, cache, this.settings.url);
      }
    ));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MainSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("n8n Webhook URL").addText((text) => text.setPlaceholder("Enter your the url").setValue(this.plugin.settings.url).onChange(async (value) => {
      this.plugin.settings.url = value;
      await this.plugin.saveSettings();
    }));
  }
};
